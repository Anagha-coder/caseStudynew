package handlers

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"

	"cloud.google.com/go/storage"
	"github.com/gin-gonic/gin"
	"google.golang.org/api/option"
)

func UploadFile(c *gin.Context) {
	// Get the file from the request

	ctx := context.Background()

	// Set up Google Cloud Storage client
	client, err := storage.NewClient(ctx, option.WithCredentialsFile(credentialFile))
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}
	defer client.Close()

	log.Printf("Request Content-Type: %s", c.Request.Header.Get("Content-Type"))

	file, err := c.FormFile("file")
	if err != nil {
		log.Printf("Error getting file: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "No file provided"})
		return
	}

	// Open the file
	src, err := file.Open()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to open file"})
		return
	}
	defer src.Close()

	// Generate a unique filename for the uploaded file
	filename := generateUniqueFilename(file.Filename)

	// Create an object handle for the bucket and object
	obj := client.Bucket(bucketName).Object(filename)

	// Create a new writer to upload the file
	dst := obj.NewWriter(context.Background())
	defer dst.Close()

	// Copy the file to the bucket
	if _, err := io.Copy(dst, src); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to upload file"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "File uploaded successfully"})
}

// Generate a unique filename for the uploaded file
func generateUniqueFilename(filename string) string {
	// You may use a more sophisticated approach for generating unique filenames
	return fmt.Sprintf("%s%s", filename, time.Now().Format("20060102150405"))
}
